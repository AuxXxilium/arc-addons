#!/usr/bin/env bash
#
# Copyright (C) 2025 AuxXxilium
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

#            fullfan        coolfan        quietfan
#               |              |              |
DEFMODES=("20 40 255 127" "30 60 255 63" "40 80 192 63")
#           ^  ^  ^  ^
#           1  2  3  4
# 1: MINTEMP  2: MAXTEMP  3: MINSTART  4: MINSTOP

_log() {
  echo "arc-sensors: $*"
  /bin/logger -p "error" -t "arc-sensors" "$@"
}

set_fan_conf() {
  for F in "/etc/synoinfo.conf" "/etc.defaults/synoinfo.conf"; do
    for K in "support_fan" "supportadt7490" "support_fan_adjust_dual_mode"; do
      /usr/syno/bin/synosetkeyvalue "${F}" "${K}" "${1:-"no"}"
    done
  done
}

generate_fancontrol_config() {
  local OPERATION FANMODE M=${1:-0}
  unset FANMODES
  OPERATION="$(synowebapi -s --exec api=SYNO.Core.EventScheduler method=get task_name=\"Fancontrol\" | jq -r '.data.operation' 2>/dev/null)"
  eval "${OPERATION}" >/dev/null 2>&1 || true
  [[ ${FANMODES[${M}]} =~ ^([0-9]+)\ ([0-9]+)\ ([0-9]+)\ ([0-9]+)$ ]] && FANMODE="${FANMODES[${M}]}" || FANMODE="${DEFMODES[${M}]}"

  # Or use pwmconfig to generate /etc/fancontrol interactively.
  local DEVPATH DEVNAME FCTEMPS FCFANS MINTEMP MAXTEMP MINSTART MINSTOP

  CORETEMP="$(find "/sys/devices/platform/" -name "temp1_input" | grep -E 'coretemp|k10temp' | sed -n 's|.*/\(hwmon.*\/temp1_input\).*|\1|p')"
  # shellcheck disable=SC2044
  for P in $(find "/sys/devices/platform/" -name "temp1_input"); do
    D="$(echo "${P}" | sed -n 's|.*/\(devices/platform/[^/]*\)/.*|\1|p')"
    I="$(echo "${P}" | sed -n 's|.*hwmon\([0-9]\).*|\1|p')"
    DEVPATH="${DEVPATH} hwmon${I}=${D}"
    DEVNAME="${DEVNAME} hwmon${I}=$(cat /sys/${D}/*/*/name)"
    for F in $(find "/sys/${D}" -name "fan[0-9]_input"); do
      IDX="$(echo "${F}" | sed -n 's|.*fan\([0-9]\)_input|\1|p')"
      FCTEMPS="${FCTEMPS} hwmon${I}/pwm${IDX}=${CORETEMP}"
      FCFANS="${FCFANS} hwmon${I}/pwm${IDX}=hwmon${I}/fan${IDX}_input"
      MINTEMP="${MINTEMP} hwmon${I}/pwm${IDX}=$(echo "${FANMODE}" | cut -d' ' -f1)"
      MAXTEMP="${MAXTEMP} hwmon${I}/pwm${IDX}=$(echo "${FANMODE}" | cut -d' ' -f2)"
      MINSTART="${MINSTART} hwmon${I}/pwm${IDX}=$(echo "${FANMODE}" | cut -d' ' -f3)"
      MINSTOP="${MINSTOP} hwmon${I}/pwm${IDX}=$(echo "${FANMODE}" | cut -d' ' -f4)"
    done
    i=$((i + 1))
  done

  DEST="/etc/fancontrol"
  {
    echo "# Configuration file generated by pwmconfig, changes will be lost"
    echo "INTERVAL=10"
    echo "DEVPATH=$(echo ${DEVPATH})"
    echo "DEVNAME=$(echo ${DEVNAME})"
    echo "FCTEMPS=$(echo ${FCTEMPS})"
    echo "FCFANS=$(echo ${FCFANS})"
    echo "MINTEMP=$(echo ${MINTEMP})"
    echo "MAXTEMP=$(echo ${MAXTEMP})"
    echo "MINSTART=$(echo ${MINSTART})"
    echo "MINSTOP=$(echo ${MINSTOP})"
  } >"${DEST}"

}

main() {
  if [ -z "$(find /sys/ -name "fan*_input")" ]; then
    _log "No fan detected is not installed, exiting..."
    set_fan_conf "no"
    exit 0
  fi

  set_fan_conf "yes"

  FanBaseMode=""
  while true; do
    sleep 1
    FanCurtMode="$(/usr/bin/arc-sensors)"
    if echo "0 1 2" | grep -wq "${FanCurtMode}"; then
      if [ ! "${FanCurtMode}" = "${FanBaseMode}" ]; then
        _log "Fan speed mode changed from ${FanBaseMode} to ${FanCurtMode}"
        FanBaseMode="${FanCurtMode}"
        generate_fancontrol_config "${FanBaseMode}"
        pkill -f "/usr/sbin/fancontrol" && rm -f "/run/fancontrol.pid"
        /usr/sbin/fancontrol &
      fi
    fi
  done
}

trap 'pkill -f "/usr/sbin/fancontrol" && rm -f "/run/fancontrol.pid"' EXIT INT TERM HUP

main &