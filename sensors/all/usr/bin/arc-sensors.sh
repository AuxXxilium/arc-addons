#!/usr/bin/env bash
#
# Copyright (C) 2025 AuxXxilium
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

#            fullfan        coolfan        quietfan
#               |              |              |
DEFMODES=("20 50 100 50" "20 70 80 20" "20 70 50 10")
#           ^  ^  ^  ^
#           1  2  3  4
# 1: MINTEMP  2: MAXTEMP  3: MINSTART  4: MINSTOP
# MINSTART and MINSTOP are in percent (0â€“100)

set_fan_conf() {
  for F in "/etc/synoinfo.conf" "/etc.defaults/synoinfo.conf"; do
    for K in "support_fan" "support_fan_adjust_dual_mode" "supportadt7490"; do
      /usr/syno/bin/synosetkeyvalue "${F}" "${K}" "${1:-"no"}"
    done
  done
}

percent_to_pwm() {
  local PERCENT=$1
  local FAN="hwmon${I}/fan${IDX}_input"
  local PWM="hwmon${I}/pwm${IDX}"
  local PWM_FILE="/etc/pwm.conf"
  if [ ! -f "${PWM_FILE}" ]; then
    echo $(( PERCENT * 255 / 100 ))
  else
    local MAX_RPM
    MAX_RPM=$(awk -v fan="$FAN" -v pwm="$PWM" '$1==fan && $3==pwm {if($2>m)m=$2} END{print m+0}' "${PWM_FILE}")
    [ "$MAX_RPM" -eq 0 ] && echo $(( PERCENT * 255 / 100 )) && return
    local TARGET_RPM=$(( MAX_RPM * PERCENT / 100 ))
    awk -v fan="$FAN" -v pwm="$PWM" -v target="$TARGET_RPM" '
      $1==fan && $3==pwm {
        diff = ($2-target); if(diff<0) diff=-diff;
        if(min=="" || diff<min) { min=diff; best=$4 }
      }
      END { if(best!="") print best; else print int(target/10)*10 }
    ' "${PWM_FILE}"
  fi
}

generate_fancontrol_config() {
  local OPERATION FANMODE M=${1:-0}
  local FANMODES=("${DEFMODES[@]}")
  OPERATION="$(synowebapi -s --exec api=SYNO.Core.EventScheduler method=get task_name=\"Fancontrol\" | jq -r '.data.operation' 2>/dev/null)"
  eval "${OPERATION}" >/dev/null 2>&1 || true
  [[ ${FANMODES[${M}]} =~ ^([0-9]+)\ ([0-9]+)\ ([0-9]+)\ ([0-9]+)$ ]] && FANMODE="${FANMODES[${M}]}" || FANMODE="${DEFMODES[${M}]}"

  local DEVPATH DEVNAME FCTEMPS FCFANS MINTEMP MAXTEMP MINSTART MINSTOP MINSTARTP MINSTOPP

  CORETEMP="$(find "/sys/devices/platform/" -name "temp1_input" | grep -E 'coretemp|k10temp' | sed -n 's|.*/\(hwmon.*\/temp1_input\).*|\1|p')"
  for P in $(find "/sys/devices/platform/" -type f -name "temp1_input"); do
    D="$(echo "${P}" | sed -n 's|.*/\(devices/platform/[^/]*\)/.*|\1|p')"
    I="$(echo "${P}" | sed -n 's|.*hwmon\([0-9]\).*|\1|p')"
    DEVPATH="${DEVPATH} hwmon${I}=${D}"
    DEVNAME="${DEVNAME} hwmon${I}=$(cat /sys/${D}/*/*/name)"
    for F in $(find "/sys/${D}" -type f -name "fan[0-9]_input"); do
      R="$(cat "${F}" 2>/dev//null)"
      [ "${R:-0}" -le 0 ] && continue
      IDX="$(echo "${F}" | sed -n 's|.*fan\([0-9]\)_input|\1|p')"
      FCTEMPS="${FCTEMPS} hwmon${I}/pwm${IDX}=${CORETEMP}"
      FCFANS="${FCFANS} hwmon${I}/pwm${IDX}=hwmon${I}/fan${IDX}_input"
      MINTEMP="${MINTEMP} hwmon${I}/pwm${IDX}=$(echo "${FANMODE}" | cut -d' ' -f1)"
      MAXTEMP="${MAXTEMP} hwmon${I}/pwm${IDX}=$(echo "${FANMODE}" | cut -d' ' -f2)"
      MINSTARTP="$(percent_to_pwm $(echo "${FANMODE}" | cut -d' ' -f3))"
      MINSTOPP="$(percent_to_pwm $(echo "${FANMODE}" | cut -d' ' -f4))"
      MINSTART="${MINSTART} hwmon${I}/pwm${IDX}=${MINSTARTP}"
      MINSTOP="${MINSTOP} hwmon${I}/pwm${IDX}=${MINSTOPP}"
    done
  done

  DEST="/etc/fancontrol"
  rm -f "${DEST}"
  {
    echo "# Configuration file generated by pwmconfig, changes will be lost"
    echo "INTERVAL=10"
    echo "DEVPATH=$(echo ${DEVPATH})"
    echo "DEVNAME=$(echo ${DEVNAME})"
    echo "FCTEMPS=$(echo ${FCTEMPS})"
    echo "FCFANS=$(echo ${FCFANS})"
    echo "MINTEMP=$(echo ${MINTEMP})"
    echo "MAXTEMP=$(echo ${MAXTEMP})"
    echo "MINSTART=$(echo ${MINSTART})"
    echo "MINSTOP=$(echo ${MINSTOP})"
  } >"${DEST}"

}

main() {
  if [ -z "$(find /sys/ -name "fan*_input")" ]; then
    echo "No fan detected, exiting..."
    set_fan_conf "no"
    exit 0
  fi

  set_fan_conf "yes"

  FanBaseMode=""
  while true; do
    sleep 1
    FanType="$(/bin/get_key_value /etc/synoinfo.conf fan_config_type_internal 2>/dev/null)"
    case "${FanType}" in fullfan | full) FanCurtMode="0" ;; coolfan | high) FanCurtMode="1" ;; quietfan | low) FanCurtMode="2" ;; *) FanCurtMode="1" ;; esac
    if echo "0 1 2" | grep -wq "${FanCurtMode}"; then
      if [ "${FanCurtMode}" != "${FanBaseMode}" ]; then
        echo "Fan speed mode changed from ${FanBaseMode} to ${FanCurtMode}"
        FanBaseMode="${FanCurtMode}"
        generate_fancontrol_config "${FanBaseMode}"
        /usr/bin/pkill -f "/usr/sbin/fancontrol" 2>/dev/null && rm -f "/run/fancontrol.pid"
        /usr/sbin/fancontrol &
      fi
    fi
  done
}

trap '/usr/bin/pkill -f "/usr/sbin/fancontrol" 2>/dev/null && rm -f "/run/fancontrol.pid"' EXIT INT TERM HUP

main &